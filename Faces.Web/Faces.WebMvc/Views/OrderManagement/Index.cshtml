@model List<Faces.WebMvc.Models.ViewModels.OrderViewModel>
@using Messaging.InterfacesConstants.Constants; 
@using Messaging.InterfacesConstants.SignalR; 
@using Microsoft.Extensions.Options;
@inject IOptions<Faces.WebMvc.Settings.AppSettings> settings;

@{
    ViewData["Title"] = "Orders List";
}

<h3>Orders Management - overview</h3>
<div class="container">
    @if (Model.Count > 0)
    {
        <div class="row tab-pane" id="tableHead">
            <div class="col-3">
                <p>Order Id</p>
            </div>
            <div class="col-3">
                <p>User Email</p>
            </div>
            <div class="col-3">
                <p>Image</p>
            </div>
            <div class="col-3">
                <p>Status</p>
            </div>
        </div>
        foreach (var order in Model)
        {
            <div class="row clickable" onclick="location.href='@Url.Action("Details","OrderManagement",
                                                              new { orderId = order.Id})'">
                <div class="col-3">
                    @order.Id
                </div>
                <div class="col-3">
                    @order.Email
                </div>
                <div class="col-3">
                    <img src="@order.FileUrl" width="50px" height="50px" />
                </div>
                <div class="col-3">
                    @order.Status
                </div>
            </div>
        }
    }

</div>


@section Scripts{
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script type="text/javascript">

        var timerId;
        //connection between this client page and server
        //ex. http://localhost:5500/orderhub, this /orderhub comes from the SignalR EndPoint registration address in the orderAPI's startup class 
        //we bind client with the server address
        const connetction = new signalR.HubConnectionBuilder()
            //.withUrl('/**/@HostsAdresses.OrderApi'+'@EndPoints.OrderApiHubEndPoint')
            .withUrl('@settings.Value.SignalRHubUrl'+'@EndPoints.OrderApiHubEndPoint')
            .configureLogging(signalR.LogLevel.Debug)
            .withAutomaticReconnect()
            .build();

        
        //this will allow to call the callback method for server, when server triggers this method 
        connetction.on('@ClientsMethodsName.UpdateOrdersOnClient', (message, id) => {

            const encodedMsg = message + ':' + id;
            console.log(encodedMsg);
            if (id && id.length) {
                toastr.success(id + ' Updated to status: ' + message);
                refreshPage();
            }

        });

        function refreshPage() {
            clearTimeout(timerId);
            timerId = setTimeout(function () {
                window.location.reload();
            },3000);
        };

        
        connetction.start().catch(err => console.error(err).toString());

    </script>

}